/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.kaleido;

import io.kaleido.flow.ExampleFlow;
import net.corda.client.rpc.CordaRPCClient;
import net.corda.client.rpc.CordaRPCConnection;
import net.corda.core.identity.Party;
import net.corda.core.messaging.CordaRPCOps;
import net.corda.core.messaging.FlowHandle;
import net.corda.core.transactions.SignedTransaction;
import net.corda.core.utilities.NetworkHostAndPort;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Set;

class ClientRpcExample {
    private static final Logger logger = LoggerFactory.getLogger(ClientRpcExample.class);

    public static void main(String[] args) {
        if (args.length != 3) {
            throw new IllegalArgumentException("Usage: rpcClient <node address> <username> <password>");
        }
        final NetworkHostAndPort nodeAddress = NetworkHostAndPort.parse(args[0]);
        String username = args[1];
        String password = args[2];

        final CordaRPCClient client = new CordaRPCClient(nodeAddress);
        final CordaRPCConnection connection = client.start(username, password);
        final CordaRPCOps cordaRPCOperations = connection.getProxy();

        logger.info("Calling node for current time...");
        logger.info(cordaRPCOperations.currentNodeTime().toString());
        logger.info("Calling node for node info...");
        logger.info(cordaRPCOperations.nodeInfo().toString());
        logger.info("Calling node for notary information...");
        logger.info(cordaRPCOperations.notaryIdentities().toString());

        logger.info("Initiating the IoU flow...");
        try {
            final Set<Party> parties = cordaRPCOperations.partiesFromName("zzabcdefgh", false);
            if (parties.size() < 1) {
                logger.error("Failed to find borrower party");
                throw new IllegalArgumentException();
            }
            logger.info("Size of parties: {}", parties.size());
            final Party borrower = parties.iterator().next();
            logger.info("Borrower party: {}", borrower.toString());
            final FlowHandle<SignedTransaction> flowHandle = cordaRPCOperations.startFlowDynamic(ExampleFlow.Initiator.class, 100, borrower);
            logger.info("Started flow, handle: {}", flowHandle.toString());
            final SignedTransaction result = flowHandle.getReturnValue().get();
            final String msg = result.getTx().getOutputStates().get(0).toString();
            logger.info(msg);
        } catch (Exception e) {
            e.printStackTrace();
        }

        connection.notifyServerAndClose();
    }
}